{"version":3,"file":"ngx-tonysamperi-dom.mjs","sources":["../../../projects/dom/src/lib/services/smp-dom.service.ts","../../../projects/dom/src/lib/smp-dom.module.ts"],"sourcesContent":["import {\n    ComponentRef,\n    ElementRef,\n    Injectable,\n    InjectionToken,\n    StaticProvider,\n    Type,\n    ViewContainerRef\n} from \"@angular/core\";\nimport {ComponentFactoryResolver} from \"@angular/core\";\nimport {ApplicationRef} from \"@angular/core\";\nimport {Injector} from \"@angular/core\";\nimport {EmbeddedViewRef} from \"@angular/core\";\n//\nimport {SmpCompRefs, SmpCompData} from \"../models/public\";\n//\nimport {first, Observable, timer} from \"rxjs\";\n\n@Injectable()\nexport class SmpDomService {\n\n    private _refs: SmpCompRefs = {};\n\n    constructor(private _componentFactoryResolver: ComponentFactoryResolver,\n                private _appRef: ApplicationRef,\n                private _injector: Injector) {\n    }\n\n    /**\n     *\n     * @param component: the class component to dynamically append\n     * @param key: a key used to retrieve the component after it's been appended (allows removal)\n     * @param target: the dom selector/element/ref where the new comp will be appended\n     * @param injector: optional injector to override the component params\n     * @param hook: optional hook to delay the append action. Can be any observable.\n     */\n    appendComp<T = any>(component: Type<T>,\n                        key?: string,\n                        target: string | HTMLElement | ElementRef = \"body\",\n                        injector: Injector = this._injector,\n                        hook: Observable<void | number> = timer(0)): ComponentRef<T> {\n        // 1. Create a component reference from the component\n        const componentRef = this._componentFactoryResolver\n            .resolveComponentFactory(component as Type<T>)\n            .create(injector);\n\n        // 2. Attach component to the appRef so that it's inside the ng component tree\n        this._appRef.attachView(componentRef.hostView);\n\n        // 3. Get DOM element from component\n        const domElem = (componentRef.hostView as EmbeddedViewRef<any>)\n            .rootNodes[0] as HTMLElement;\n\n        if (!!key) {\n            !!this._refs[key] && console.warn(\"A ref with this key already exists and will be overwritten\");\n            this._refs[key] = componentRef;\n        }\n        else {\n            console.warn(\"Component appended, but key wasn't provided. It won't be possible to remove it from the DOM automagically\");\n        }\n\n        hook\n            .pipe(first())\n            .subscribe(() => {\n            // 4. Append DOM element to the body\n            const targetEl = (typeof target === typeof \"\"\n                ? document.querySelector(target as string)\n                : target instanceof ElementRef ? target.nativeElement : target) || document.body;\n            targetEl.appendChild(domElem);\n        });\n\n        return componentRef as ComponentRef<T>;\n    }\n\n    appendComps(compsData: SmpCompData[], injector?: Injector, hook?: Observable<void | number>): void {\n        compsData.forEach((compData) => this.appendComp(compData.comp, compData.key, compData.target, injector, hook));\n    }\n\n    createInjector<T = any>(token: InjectionToken<T>, value: T, viewContainerRef?: ViewContainerRef): Injector {\n        const providers: StaticProvider[] = [\n            {provide: token, useValue: value}\n        ];\n\n        return Injector.create({\n            parent: viewContainerRef ? viewContainerRef.injector : this._injector,\n            providers\n        });\n    }\n\n    removeComp(key: string): boolean {\n        if (!!this._refs[key]) {\n            const componentRef = this._refs[key];\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n\n            return !0;\n        }\n        else {\n            console.warn(`No ref found with key ${key}`);\n\n            return !1;\n        }\n    }\n\n}\n","import {ModuleWithProviders, NgModule} from \"@angular/core\";\n//\nimport {SmpDomService} from \"./services/public\";\n\n@NgModule({})\nexport class SmpDomModule {\n\n    static forRoot(): ModuleWithProviders<SmpDomModule> {\n        return {\n            ngModule: SmpDomModule,\n            providers: [\n                SmpDomService\n            ]\n        };\n    }\n}\n"],"names":[],"mappings":"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"}